import { IElementWrapper } from './interfaces';
export declare class AbstractWrapper implements IElementWrapper<string, MultiElementWrapper<ElementWrapper>> {
    protected root: string;
    constructor(root: string);
    getElement(): string;
    matches(selector: string): ElementWrapper;
    find(selector: string): ElementWrapper;
    findAll(selector: string): MultiElementWrapper<ElementWrapper>;
    findByClassName(className: string): ElementWrapper;
    findAllByClassName(className: string): MultiElementWrapper<ElementWrapper>;
    findComponent<Wrapper extends ComponentWrapper>(selector: string, ComponentClass: {
        new (element: string): Wrapper;
    }): Wrapper;
    toSelector(): string;
}
export declare class ElementWrapper extends AbstractWrapper {
}
export declare class ComponentWrapper extends AbstractWrapper {
}
export declare class MultiElementWrapper<T extends AbstractWrapper> extends ElementWrapper {
    private elementFactory;
    constructor(root: string, elementFactory: (selector: string) => T);
    /**
     * Index is one-based because the method uses the :nth-child() CSS pseudo-class.
     */
    get(index: number): T;
    map<T extends AbstractWrapper>(factory: (wrapper: ElementWrapper) => T): MultiElementWrapper<T>;
}
export declare function createWrapper(root?: string): ElementWrapper;
