// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { CLogClient, PanoramaClient } from './log-clients';
import { buildMetricDetail, buildMetricHash, buildMetricName } from './formatters';
var oneTimeMetrics = new Set();
// In case we need to override the theme for VR.
var theme = '';
function setTheme(newTheme) {
    theme = newTheme;
}
var Metrics = /** @class */ (function () {
    function Metrics(source, packageVersion) {
        this.clog = new CLogClient();
        this.panorama = new PanoramaClient();
        this.source = source;
        this.packageVersion = packageVersion;
    }
    Metrics.prototype.initMetrics = function (theme) {
        setTheme(theme);
    };
    /**
     * Calls Console Platform's client logging JS API with provided metric name, value, and detail.
     * Does nothing if Console Platform client logging JS is not present in page.
     */
    Metrics.prototype.sendMetric = function (metricName, value, detail) {
        if (!theme) {
            // Metrics need to be initialized first (initMetrics)
            console.error('Metrics need to be initialized first.');
            return;
        }
        this.clog.sendMetric(metricName, value, detail);
    };
    /**
     * Calls Console Platform's client v2 logging JS API with provided metric name and detail.
     * Does nothing if Console Platform client logging JS is not present in page.
     */
    Metrics.prototype.sendPanoramaMetric = function (metric) {
        this.panorama.sendMetric(metric);
    };
    Metrics.prototype.sendMetricObject = function (metric, value) {
        this.sendMetric(buildMetricName(metric, theme), value, buildMetricDetail(metric, theme));
    };
    Metrics.prototype.sendMetricObjectOnce = function (metric, value) {
        var metricHash = buildMetricHash(metric);
        if (!oneTimeMetrics.has(metricHash)) {
            this.sendMetricObject(metric, value);
            oneTimeMetrics.add(metricHash);
        }
    };
    /*
     * Calls Console Platform's client logging only the first time the provided metricName is used.
     * Subsequent calls with the same metricName are ignored.
     */
    Metrics.prototype.sendMetricOnce = function (metricName, value, detail) {
        if (!oneTimeMetrics.has(metricName)) {
            this.sendMetric(metricName, value, detail);
            oneTimeMetrics.add(metricName);
        }
    };
    /*
     * Reports a metric value 1 to Console Platform's client logging service to indicate that the
     * component was loaded. The component load event will only be reported as used to client logging
     * service once per page view.
     */
    Metrics.prototype.logComponentLoaded = function () {
        this.sendMetricObjectOnce({ source: this.source, action: 'loaded', version: this.packageVersion }, 1);
    };
    /*
     * Reports a metric value 1 to Console Platform's client logging service to indicate that the
     * component was used in the page.  A component will only be reported as used to client logging
     * service once per page view.
     */
    Metrics.prototype.logComponentUsed = function (componentName) {
        this.sendMetricObjectOnce({
            source: componentName,
            action: 'used',
            version: this.packageVersion
        }, 1);
    };
    return Metrics;
}());
export { Metrics };
var MetricsTestHelper = /** @class */ (function () {
    function MetricsTestHelper() {
    }
    MetricsTestHelper.prototype.resetOneTimeMetricsCache = function () {
        oneTimeMetrics.clear();
    };
    return MetricsTestHelper;
}());
export { MetricsTestHelper };
