{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../../../src/s3-resource-selector/s3-in-context/validation.ts"],"names":[],"mappings":"AAKA,+EAA+E;AAC/E,MAAM,MAAM,GAAG,OAAO,CAAC;AACvB,MAAM,iBAAiB,GAAG,cAAc,CAAC;AACzC,MAAM,cAAc,GAAG,OAAO,CAAC;AAC/B,MAAM,QAAQ,GAAG,mFAAmF,CAAC;AAErG,SAAS,qBAAqB,CAAC,UAAkB;IAC/C,OAAO,CAAC,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,IAAI,EAAE,CAAC;AAC3D,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,GAAW;IAC3C,MAAM,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjE,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACtC,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,GAAW;IAClC,IAAI,GAAG,KAAK,EAAE,EAAE;QACd,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;QAC1C,OAAO,yBAAkC,CAAC;KAC3C;IACD,MAAM,CAAC,UAAU,CAAC,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QACvC,OAAO,2BAAoC,CAAC;KAC7C;IACD,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QACnC,OAAO,gCAAyC,CAAC;KAClD;IACD,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAE;QACtC,OAAO,wBAAiC,CAAC;KAC1C;IACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QAC9B,OAAO,+BAAwC,CAAC;KACjD;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,YAAY,CAC1B,IAAqD,EACrD,WAA4D,EAC5D,SAAsC;IAEtC,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,SAAS,EAAE,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC5F,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ComponentFormatFunction } from '../../i18n/context';\nimport { S3ResourceSelectorProps } from '../interfaces';\n\n// https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html\nconst SCHEME = 's3://';\nconst BUCKET_FIRST_CHAR = /^[a-z0-9]{1}/;\nconst CAPITAL_LETTER = /[A-Z]/;\nconst DNS_NAME = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\n\nfunction checkBucketNameLength(bucketName: string) {\n  return 3 <= bucketName.length && bucketName.length <= 63;\n}\n\nexport function extractBucketName(uri: string) {\n  const [bucketName, ...rest] = uri.replace(SCHEME, '').split('/');\n  return [bucketName, rest.join('/')];\n}\n\nexport function validate(uri: string) {\n  if (uri === '') {\n    return undefined;\n  }\n  if (uri.slice(0, SCHEME.length) !== SCHEME) {\n    return 'validationPathMustBegin' as const;\n  }\n  const [bucketName] = extractBucketName(uri);\n  if (!BUCKET_FIRST_CHAR.test(bucketName)) {\n    return 'validationBucketLowerCase' as const;\n  }\n  if (CAPITAL_LETTER.test(bucketName)) {\n    return 'validationBucketMustNotContain' as const;\n  }\n  if (!checkBucketNameLength(bucketName)) {\n    return 'validationBucketLength' as const;\n  }\n  if (!DNS_NAME.test(bucketName)) {\n    return 'validationBucketMustComplyDns' as const;\n  }\n  return undefined;\n}\n\nexport function getErrorText(\n  i18n: ComponentFormatFunction<'s3-resource-selector'>,\n  i18nStrings: S3ResourceSelectorProps.I18nStrings | undefined,\n  errorCode: ReturnType<typeof validate>\n) {\n  return errorCode ? i18n(`i18nStrings.${errorCode}`, i18nStrings?.[errorCode]) : undefined;\n}\n"]}