{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/s3-resource-selector/index.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport clsx from 'clsx';\nimport React, { useState, useRef, useEffect } from 'react';\nimport InternalBox from '../box/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { S3InContext, S3InContextRef } from './s3-in-context';\nimport { S3ResourceSelectorProps } from './interfaces';\nimport { S3Modal, S3ModalProps } from './s3-modal';\nimport styles from './styles.css.js';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { checkSafeUrl } from '../internal/utils/check-safe-url';\nimport { useFormFieldContext } from '../contexts/form-field';\n\nexport { S3ResourceSelectorProps };\n\nconst S3ResourceSelector = React.forwardRef(\n  (\n    {\n      i18nStrings,\n      inputPlaceholder,\n      alert,\n      resource,\n      viewHref,\n      invalid,\n      selectableItemsTypes = [],\n      inputAriaDescribedby,\n      bucketsVisibleColumns = ['Name', 'CreationDate'],\n      bucketsIsItemDisabled,\n      fetchBuckets,\n      fetchObjects,\n      objectsVisibleColumns = ['Key', 'LastModified', 'Size'],\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns = ['ID', 'LastModified', 'Size'],\n      versionsIsItemDisabled,\n      onChange,\n      ariaLabel,\n      getModalRoot,\n      removeModalRoot,\n      ...rest\n    }: S3ResourceSelectorProps,\n    ref: React.Ref<S3ResourceSelectorProps.Ref>\n  ) => {\n    checkSafeUrl('S3ResourceSelector', viewHref);\n    const { __internalRootRef } = useBaseComponent('S3ResourceSelector');\n    const [modalOpen, setModalOpen] = useState(false);\n    const inContextRef = useRef<S3InContextRef>(null);\n    const modalWasSubmitted = useRef<boolean>(false);\n    useForwardFocus(ref, inContextRef);\n    const { ariaLabelledby, ariaDescribedby } = useFormFieldContext(rest);\n\n    useEffect(() => {\n      // Focus uriInput only when modal was submitted.\n      // When it was dismissed, the focus naturally goes to previously focused element (browse button)\n      if (!modalOpen && modalWasSubmitted.current) {\n        modalWasSubmitted.current = false;\n        inContextRef.current?.focus();\n      }\n    }, [modalOpen]);\n\n    const baseProps = getBaseProps(rest);\n    const modalProps: S3ModalProps = {\n      alert,\n      i18nStrings,\n      fetchBuckets,\n      selectableItemsTypes,\n      bucketsVisibleColumns,\n      bucketsIsItemDisabled,\n      fetchObjects,\n      objectsVisibleColumns,\n      objectsIsItemDisabled,\n      fetchVersions,\n      versionsVisibleColumns,\n      versionsIsItemDisabled,\n      getModalRoot,\n      removeModalRoot,\n      onSubmit: resource => {\n        fireNonCancelableEvent(onChange, { resource });\n        setModalOpen(false);\n        modalWasSubmitted.current = true;\n      },\n      onDismiss: () => setModalOpen(false),\n    };\n    return (\n      <div\n        {...baseProps}\n        className={clsx(styles.root, baseProps.className)}\n        ref={__internalRootRef}\n        role=\"group\"\n        aria-labelledby={ariaLabelledby}\n        aria-describedby={ariaDescribedby}\n        aria-label={ariaLabel}\n      >\n        <S3InContext\n          ref={inContextRef}\n          selectableItemsTypes={selectableItemsTypes}\n          i18nStrings={i18nStrings}\n          inputPlaceholder={inputPlaceholder}\n          resource={resource}\n          viewHref={viewHref}\n          invalid={invalid}\n          inputAriaDescribedby={inputAriaDescribedby}\n          fetchVersions={fetchVersions}\n          onBrowse={() => setModalOpen(true)}\n          onChange={(resource, errorText) => fireNonCancelableEvent(onChange, { resource, errorText })}\n        />\n        {!modalOpen && alert && (\n          <InternalBox className={styles.alert} margin={{ top: 's' }}>\n            {alert}\n          </InternalBox>\n        )}\n        {modalOpen && <S3Modal {...modalProps} />}\n      </div>\n    );\n  }\n);\n\napplyDisplayName(S3ResourceSelector, 'S3ResourceSelector');\nexport default S3ResourceSelector;\n"]}