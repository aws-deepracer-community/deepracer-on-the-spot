{"version":3,"file":"area-series.js","sourceRoot":"","sources":["../../../../src/area-chart/elements/area-series.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,UAAU,CAAC;AAStC,eAAe,IAAI,CAAC,UAAU,CAAsB,CAAC;AAErD,SAAS,UAAU,CAAI,EAAE,IAAI,EAAE,KAAK,EAAE,iBAAiB,EAAsB;IAC3E,MAAM,aAAa,GAAG,IAAI,EAA2B;SAClD,CAAC,CAAC,CAAC,CAA0B,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;SAC7C,EAAE,CAAC,CAAC,CAA0B,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC;SAC/C,EAAE,CAAC,CAAC,CAA0B,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnD,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAiC,CAAC,IAAI,EAAE,CAAC;IAExE,MAAM,aAAa,GAAG,IAAI,EAA2B;SAClD,CAAC,CAAC,CAAC,CAA0B,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;SAC7C,CAAC,CAAC,CAAC,CAA0B,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAiC,CAAC,IAAI,EAAE,CAAC;IAExE,OAAO,CACL;QACE,6CACe,IAAI,EACjB,IAAI,EAAE,KAAK,EACX,MAAM,EAAE,KAAK,EACb,KAAK,EAAE,EAAE,OAAO,EAAE,GAAG,EAAE,EACvB,QAAQ,EAAE,QAAQ,iBAAiB,GAAG,EACtC,CAAC,EAAE,QAAQ,GACX;QACF,6CAAmB,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,iBAAiB,GAAG,EAAE,CAAC,EAAE,QAAQ,GAAI,CAC9F,CACJ,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { memo } from 'react';\nimport { line, area } from 'd3-shape';\nimport { ChartModel } from '../model';\n\nexport interface AreaSeriesProps<T> {\n  data: readonly ChartModel.PlotPoint<T>[];\n  color: string;\n  chartAreaClipPath: string;\n}\n\nexport default memo(AreaSeries) as typeof AreaSeries;\n\nfunction AreaSeries<T>({ data, color, chartAreaClipPath }: AreaSeriesProps<T>) {\n  const areaGenerator = area<ChartModel.PlotPoint<T>>()\n    .x((p: ChartModel.PlotPoint<T>) => p.scaled.x)\n    .y0((p: ChartModel.PlotPoint<T>) => p.scaled.y0)\n    .y1((p: ChartModel.PlotPoint<T>) => p.scaled.y1);\n  const areaPath = areaGenerator(data as ChartModel.PlotPoint<T>[]) || '';\n\n  const lineGenerator = line<ChartModel.PlotPoint<T>>()\n    .x((p: ChartModel.PlotPoint<T>) => p.scaled.x)\n    .y((p: ChartModel.PlotPoint<T>) => p.scaled.y1);\n  const linePath = lineGenerator(data as ChartModel.PlotPoint<T>[]) || '';\n\n  return (\n    <>\n      <path\n        aria-hidden={true}\n        fill={color}\n        stroke={color}\n        style={{ opacity: 0.4 }}\n        clipPath={`url(#${chartAreaClipPath})`}\n        d={areaPath}\n      />\n      <path aria-hidden={true} stroke={color} clipPath={`url(#${chartAreaClipPath})`} d={linePath} />\n    </>\n  );\n}\n"]}