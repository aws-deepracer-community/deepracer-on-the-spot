{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-dynamic-overlap/index.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AAEpD,OAAO,EAAE,qBAAqB,EAAE,MAAM,uCAAuC,CAAC;AAC9E,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,+CAA+C,CAAC;AASlF;;;;;GAKG;AACH,MAAM,UAAU,iBAAiB,CAAC,KAA8B;;IAC9D,MAAM,QAAQ,GAAG,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,mCAAI,KAAK,CAAC;IAC1C,MAAM,uBAAuB,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAC;IAClE,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAEvC,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACrF,MAAM,WAAW,GAAG,WAAW,CAC7B,CAAC,KAA0B,EAAE,EAAE;QAC7B,IAAI,CAAC,QAAQ,EAAE;YACb,uBAAuB,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;SACjD;IACH,CAAC,EACD,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CACpC,CAAC;IAEF,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAE3C,eAAe,CACb,SAAS,0BAA0B;QACjC,+CAA+C;QAC/C,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,QAAQ,EAAE;gBACb,uBAAuB,CAAC,CAAC,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC;IACJ,CAAC,EACD,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CACpC,CAAC;IAEF,OAAO,iBAAiB,CAAC;AAC3B,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext, useLayoutEffect } from 'react';\n\nimport { DynamicOverlapContext } from '../../context/dynamic-overlap-context';\nimport { useRef, useCallback } from 'react';\nimport { ContainerQueryEntry } from '@cloudscape-design/component-toolkit';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\nexport interface UseDynamicOverlapProps {\n  /**\n   * Disables hook if not needed. By default, `false`.\n   */\n  disabled?: boolean;\n}\n\n/**\n * Observes the height of an element referenced by the returning ref and sets the value as overlapping\n * height for the surrounding AppLayout component.\n * @param props.disabled disables hook if not applicable\n * @returns ref to be measured as overlapping height\n */\nexport function useDynamicOverlap(props?: UseDynamicOverlapProps) {\n  const disabled = props?.disabled ?? false;\n  const setDynamicOverlapHeight = useContext(DynamicOverlapContext);\n  const overlapElementRef = useRef(null);\n\n  const getElement = useCallback(() => overlapElementRef.current, [overlapElementRef]);\n  const updateState = useCallback(\n    (entry: ContainerQueryEntry) => {\n      if (!disabled) {\n        setDynamicOverlapHeight(entry.contentBoxHeight);\n      }\n    },\n    [disabled, setDynamicOverlapHeight]\n  );\n\n  useResizeObserver(getElement, updateState);\n\n  useLayoutEffect(\n    function handleDynamicOverlapHeight() {\n      // Set overlap height back to 0 when unmounting\n      return () => {\n        if (!disabled) {\n          setDynamicOverlapHeight(0);\n        }\n      };\n    },\n    [disabled, setDynamicOverlapHeight]\n  );\n\n  return overlapElementRef;\n}\n"]}