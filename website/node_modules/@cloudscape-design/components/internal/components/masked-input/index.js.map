{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/components/masked-input/index.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAO,QAAQ,EAAE,eAAe,EAAE,MAAM,OAAO,CAAC;AAC9D,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAE1D,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAE,sBAAsB,EAAE,MAAM,cAAc,CAAC;AAE3E,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;AAEvE,OAAO,aAAa,MAAM,yBAAyB,CAAC;AAEpD,OAAO,OAAO,MAAM,YAAY,CAAC;AACjC,OAAO,UAAU,MAAM,qBAAqB,CAAC;AAI7C,MAAM,WAAW,GAAG,KAAK,CAAC,UAAU,CAClC,CACE,EASmB,EACnB,GAA8B,EAC9B,EAAE;QAXF,EACE,KAAK,EACL,MAAM,EACN,QAAQ,EACR,SAAS,EACT,IAAI,EACJ,OAAO,GAAG,KAAK,EACf,yBAAyB,GAAG,KAAK,OAEhB,EADd,IAAI,cART,4FASC,CADQ;IAIT,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IACrC,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnD,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAmB,IAAI,CAAC,CAAC;IACtD,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAgB,IAAI,CAAC,CAAC;IAE1E,eAAe,CAAC,GAAG,EAAE;;QACnB,IAAI,cAAc,KAAK,IAAI,EAAE;YAC3B,MAAA,QAAQ,CAAC,OAAO,0CAAE,iBAAiB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;SACrE;IACH,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;IAE/B,MAAM,KAA4B,OAAO,CAAC;QACxC,MAAM,EAAE,IAAI,UAAU,CAAC,IAAI,CAAC;QAC5B,KAAK;QACL,QAAQ;QACR,OAAO;QACP,yBAAyB;QACzB,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,sBAAsB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC;QAC1F,SAAS,EAAE,CAAC,KAAkB,EAAE,EAAE,CAChC,CAAC,IAAI,CAAC,QAAQ,IAAI,SAAS,IAAI,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC;QACpF,MAAM,EAAE,GAAG,EAAE,CAAC,sBAAsB,CAAC,MAAM,CAAC;QAC5C,WAAW,EAAE,iBAAiB;KAC/B,CAAC,EAXI,EAAE,OAAO,OAWb,EAXkB,SAAS,cAAvB,WAAyB,CAW7B,CAAC;IAEH,MAAM,UAAU,+DAAQ,IAAI,GAAK,SAAS,GAAK,gBAAgB,GAAK,SAAS,CAAE,CAAC;IAChF,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC9C,OAAO,CACL,oBAAC,aAAa,oBACR,UAAU,IACd,GAAG,EAAE,SAAS,EACd,kBAAkB,EAAE;YAClB,OAAO;SACR,IACD,CACH,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,OAAO,EAAoB,OAAO,EAAE,CAAC;AACrC,eAAe,WAAW,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useState, useLayoutEffect } from 'react';\nimport { useMergeRefs } from '../../hooks/use-merge-refs';\n\nimport { getBaseProps } from '../../base-component';\nimport { fireCancelableEvent, fireNonCancelableEvent } from '../../events';\n\nimport { useFormFieldContext } from '../../context/form-field-context';\n\nimport InternalInput from '../../../input/internal';\n\nimport useMask from './use-mask';\nimport MaskFormat from './utils/mask-format';\n\nimport { MaskedInputProps } from './interfaces';\n\nconst MaskedInput = React.forwardRef(\n  (\n    {\n      value,\n      onBlur,\n      onChange,\n      onKeyDown,\n      mask,\n      autofix = false,\n      disableAutocompleteOnBlur = false,\n      ...rest\n    }: MaskedInputProps,\n    ref: Ref<MaskedInputProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(rest);\n    const formFieldContext = useFormFieldContext(rest);\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [cursorPosition, setCursorPosition] = useState<number | null>(null);\n\n    useLayoutEffect(() => {\n      if (cursorPosition !== null) {\n        inputRef.current?.setSelectionRange(cursorPosition, cursorPosition);\n      }\n    }, [cursorPosition, inputRef]);\n\n    const { onPaste, ...maskProps } = useMask({\n      format: new MaskFormat(mask),\n      value,\n      inputRef,\n      autofix,\n      disableAutocompleteOnBlur,\n      onChange: (value: string) => !rest.readOnly && fireNonCancelableEvent(onChange, { value }),\n      onKeyDown: (event: CustomEvent) =>\n        !rest.readOnly && onKeyDown && fireCancelableEvent(onKeyDown, event.detail, event),\n      onBlur: () => fireNonCancelableEvent(onBlur),\n      setPosition: setCursorPosition,\n    });\n\n    const inputProps = { ...rest, ...baseProps, ...formFieldContext, ...maskProps };\n    const mergedRef = useMergeRefs(ref, inputRef);\n    return (\n      <InternalInput\n        {...inputProps}\n        ref={mergedRef}\n        __nativeAttributes={{\n          onPaste,\n        }}\n      />\n    );\n  }\n);\n\nexport { MaskedInputProps, useMask };\nexport default MaskedInput;\n"]}