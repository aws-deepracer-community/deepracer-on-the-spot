{"version":3,"file":"use-mask.js","sourceRoot":"","sources":["../../../../../src/internal/components/masked-input/use-mask.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAExC,OAAO,EAAE,QAAQ,EAAE,MAAM,+CAA+C,CAAC;AACzE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAGlD,OAAO,EAAE,gBAAgB,EAAiB,UAAU,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAsB/F,MAAM,cAAc,GAAG,CAAC,KAAa,EAAE,QAAkC,EAAE,UAAsB,EAAE,EAAE;IACnG,wCAAwC;IACxC,IAAI,CAAC,KAAK,EAAE;QACV,OAAO;KACR;IAED,MAAM,kBAAkB,GAAG,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC1D,IAAI,kBAAkB,KAAK,KAAK,EAAE;QAChC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;KAC9B;AACH,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,KAAkB,EAAE,MAA6B,EAAE,EAAE,CAAC,MAAM,IAAI,KAAK,CAAC,cAAc,EAAE,CAAC;AAE/G,MAAM,OAAO,GAAG,CAAC,EACf,KAAK,GAAG,EAAE,EACV,MAAM,EACN,QAAQ,EACR,SAAS,EACT,MAAM,EACN,QAAQ,EACR,OAAO,GAAG,KAAK,EACf,yBAAyB,GAAG,KAAK,EACjC,WAAW,GACE,EAAe,EAAE;IAC9B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAC1B,QAAQ,CAAC,SAAS,EAAE,mBAAmB,KAAK,YAAY,CAAC,CAAC;KAC3D;IAED,MAAM,YAAY,GAAG,CAAC,YAAoB,EAAE,EAAE;QAC5C,MAAM,qBAAqB,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC;QAChG,IAAI,qBAAqB,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE;YAC7E,OAAO;SACR;QAED,QAAQ,CAAC,qBAAqB,CAAC,CAAC;IAClC,CAAC,CAAC;IAEF,MAAM,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACzE,MAAM,WAAW,GAAG,MAAM,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IAEvD,OAAO;QACL,KAAK,EAAE,WAAW;QAClB,SAAS,EAAE,CAAC,KAAkB,EAAE,EAAE;;YAChC,MAAM,cAAc,GAAG,CAAA,MAAA,QAAQ,CAAC,OAAO,0CAAE,cAAc,KAAI,CAAC,CAAC;YAC7D,MAAM,YAAY,GAAG,CAAA,MAAA,QAAQ,CAAC,OAAO,0CAAE,YAAY,KAAI,CAAC,CAAC;YAEzD,IAAI,MAAiC,CAAC;YACtC,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;YACxD,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;gBAC3C,MAAM,GAAG,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE,MAAM,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;gBAC5E,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;aAC/B;iBAAM,IAAI,OAAO,KAAK,OAAO,CAAC,SAAS,EAAE;gBACxC,MAAM,GAAG,gBAAgB,CAAC,WAAW,EAAE,MAAM,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;gBAC7E,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;aAC/B;iBAAM,IAAI,OAAO,KAAK,OAAO,CAAC,KAAK,EAAE;gBACpC,MAAM,GAAG,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;aAC5C;iBAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE;gBAChD,KAAK,CAAC,cAAc,EAAE,CAAC;aACxB;YAED,IAAI,MAAM,EAAE;gBACV,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;gBAEnC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACpB,WAAW,CAAC,QAAQ,CAAC,CAAC;aACvB;YAED,uBAAuB;YACvB,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QACD,QAAQ,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;QACpD,MAAM,EAAE,GAAG,EAAE;YACX,IAAI,CAAC,yBAAyB,EAAE;gBAC9B,cAAc,CAAC,WAAW,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;aAC/C;YAED,MAAM,IAAI,MAAM,EAAE,CAAC;QACrB,CAAC;QACD,OAAO,EAAE,CAAC,KAA2B,EAAE,EAAE;;YACvC,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,aAAa,IAAK,MAAc,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAEpF,MAAM,cAAc,GAAG,CAAA,MAAA,QAAQ,CAAC,OAAO,0CAAE,cAAc,KAAI,CAAC,CAAC;YAC7D,MAAM,YAAY,GAAG,CAAA,MAAA,QAAQ,CAAC,OAAO,0CAAE,YAAY,KAAI,CAAC,CAAC;YAEzD,MAAM,aAAa,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,WAAW,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;YAC/F,YAAY,CAAC,aAAa,CAAC,CAAC;QAC9B,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { RefObject } from 'react';\nimport { InputProps } from '../../../input/interfaces';\nimport { NonCancelableEventHandler, CancelableEventHandler } from '../../events';\nimport { KeyCode } from '../../keycode';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { isCommand, isDigit } from './utils/keys';\n\nimport MaskFormat from './utils/mask-format';\nimport { backspaceHandler, HandlerResult, keyHandler, enterHandler } from './keyboard-handler';\n\ninterface UseMaskHook {\n  value: string;\n  onChange: NonCancelableEventHandler<InputProps.ChangeDetail>;\n  onKeyDown: CancelableEventHandler<InputProps.KeyDetail>;\n  onBlur: NonCancelableEventHandler<null>;\n  onPaste: (event: React.ClipboardEvent) => void;\n}\n\ninterface UseMaskProps {\n  value: string;\n  onChange: (value: string) => void;\n  onKeyDown?: (event: CustomEvent) => void;\n  onBlur?: () => void;\n  format: MaskFormat;\n  autofix?: boolean;\n  inputRef: RefObject<HTMLInputElement>;\n  disableAutocompleteOnBlur?: boolean;\n  setPosition: (position: number | null) => void;\n}\n\nconst onAutoComplete = (value: string, onChange: UseMaskProps['onChange'], maskFormat: MaskFormat) => {\n  // Do not autocomplete if input is empty\n  if (!value) {\n    return;\n  }\n\n  const autoCompletedValue = maskFormat.autoComplete(value);\n  if (autoCompletedValue !== value) {\n    onChange(autoCompletedValue);\n  }\n};\n\nconst preventDefault = (event: CustomEvent, result?: HandlerResult | null) => result && event.preventDefault();\n\nconst useMask = ({\n  value = '',\n  onBlur,\n  onChange,\n  onKeyDown,\n  format,\n  inputRef,\n  autofix = false,\n  disableAutocompleteOnBlur = false,\n  setPosition,\n}: UseMaskProps): UseMaskHook => {\n  if (!format.isValid(value)) {\n    warnOnce('useMask', `Invalid string \"${value}\" provided`);\n  }\n\n  const onMaskChange = (updatedValue: string) => {\n    const autofixedUpdatedValue = autofix ? format.correctMinMaxValues(updatedValue) : updatedValue;\n    if (autofixedUpdatedValue === value || !format.isValid(autofixedUpdatedValue)) {\n      return;\n    }\n\n    onChange(autofixedUpdatedValue);\n  };\n\n  const initialValue = autofix ? format.correctMinMaxValues(value) : value;\n  const maskedValue = format.getValidValue(initialValue);\n\n  return {\n    value: maskedValue,\n    onKeyDown: (event: CustomEvent) => {\n      const selectionStart = inputRef.current?.selectionStart || 0;\n      const selectionEnd = inputRef.current?.selectionEnd || 0;\n\n      let result: HandlerResult | undefined;\n      const { keyCode, key, ctrlKey, metaKey } = event.detail;\n      if (isDigit(key) || format.isSeparator(key)) {\n        result = keyHandler(maskedValue, key, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.backspace) {\n        result = backspaceHandler(maskedValue, format, selectionStart, selectionEnd);\n        preventDefault(event, result);\n      } else if (keyCode === KeyCode.enter) {\n        result = enterHandler(maskedValue, format);\n      } else if (!isCommand(keyCode, ctrlKey, metaKey)) {\n        event.preventDefault();\n      }\n\n      if (result) {\n        const { value, position } = result;\n\n        onMaskChange(value);\n        setPosition(position);\n      }\n\n      // Proxy original event\n      onKeyDown && onKeyDown(event);\n    },\n    onChange: ({ detail }) => onMaskChange(detail.value),\n    onBlur: () => {\n      if (!disableAutocompleteOnBlur) {\n        onAutoComplete(maskedValue, onChange, format);\n      }\n\n      onBlur && onBlur();\n    },\n    onPaste: (event: React.ClipboardEvent) => {\n      const text = (event.clipboardData || (window as any).clipboardData).getData('text');\n\n      const selectionStart = inputRef.current?.selectionStart || 0;\n      const selectionEnd = inputRef.current?.selectionEnd || 0;\n\n      const formattedText = format.formatPastedText(text, maskedValue, selectionStart, selectionEnd);\n      onMaskChange(formattedText);\n    },\n  };\n};\n\nexport default useMask;\n"]}