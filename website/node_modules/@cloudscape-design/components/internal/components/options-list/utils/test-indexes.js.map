{"version":3,"file":"test-indexes.js","sourceRoot":"","sources":["../../../../../../src/internal/components/options-list/utils/test-indexes.ts"],"names":[],"mappings":"AAUA,MAAM,YAAY,GAAG,IAAI,OAAO,EAAyB,CAAC;AAC1D,8FAA8F;AAC9F,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAqB,IAAO,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC5F,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,aAA+B,EAC/B,cAA8C,EAC9C,EAAE;IACF,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAI,UAAU,GAAG,CAAC,CAAC;IACnB,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,IAAI,YAAY,GAAoB,IAAI,CAAC;IACzC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;QACvC,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,KAAK,IAAI,KAAK,KAAK,YAAY,EAAE;YACnC,YAAY,GAAG,KAAK,CAAC;YACrB,UAAU,IAAI,CAAC,CAAC;YAChB,YAAY,GAAG,CAAC,CAAC;SAClB;QACD,IAAI,OAAO,EAAE;YACX,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;SACxC;aAAM,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzC,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE;gBACrB,YAAY,EAAE,YAAY,EAAE;gBAC5B,UAAU;gBACV,YAAY,EAAE,YAAY,EAAE;aAC7B,CAAC,CAAC;SACJ;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YAC9C,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;SAC1D;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\ninterface ListItem {\n  type?: string;\n}\ninterface TestIndexes {\n  throughIndex?: number;\n  groupIndex?: number;\n  inGroupIndex?: number;\n}\nconst testIndexMap = new WeakMap<ListItem, TestIndexes>();\n//retrieves the test indexes of the option for the findOption and findOptionInGroup test-utils\nexport const getTestOptionIndexes = <T extends ListItem>(item: T) => testIndexMap.get(item);\nexport const generateTestIndexes = <T extends ListItem, Group extends object>(\n  filteredItems: ReadonlyArray<T>,\n  getParentGroup: (item: T) => Group | undefined\n) => {\n  let throughIndex = 1;\n  let groupIndex = 0;\n  let inGroupIndex = 1;\n  let currentGroup: ListItem | null = null;\n  filteredItems.forEach(item => {\n    const isGroup = item.type === 'parent';\n    const group = isGroup ? item : getParentGroup(item);\n    if (group && group !== currentGroup) {\n      currentGroup = group;\n      groupIndex += 1;\n      inGroupIndex = 1;\n    }\n    if (isGroup) {\n      testIndexMap.set(item, { groupIndex });\n    } else if (group && item.type === 'child') {\n      testIndexMap.set(item, {\n        throughIndex: throughIndex++,\n        groupIndex,\n        inGroupIndex: inGroupIndex++,\n      });\n    } else if (item.type === 'child' || !item.type) {\n      testIndexMap.set(item, { throughIndex: throughIndex++ });\n    }\n  });\n};\n"]}