{"version":3,"file":"use-app-layout-placement.js","sourceRoot":"","sources":["../../../../src/app-layout/utils/use-app-layout-placement.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,+CAA+C,CAAC;AAElF,MAAM,UAAU,qBAAqB,CAAC,cAAsB,EAAE,cAAsB;IAClF,MAAM,cAAc,GAAG,MAAM,CAAc,IAAI,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACxD,MAAM,YAAY,GAAG,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACxD,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC;IAE/F,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE;QACtC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;YAC3B,OAAO;SACR;QACD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,cAAc,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC;QAE9E,8BAA8B;QAC9B,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,OAAO;SACR;QAED,UAAU,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IACpD,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAClD,OAAO,GAAG,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IACpE,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;IAErB,iBAAiB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IAElD,OAAO,CAAC,cAAc,kCAAO,OAAO,KAAE,GAAG,EAAE,YAAY,EAAE,MAAM,EAAE,YAAY,IAAY,CAAC;AAC5F,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useObservedElement } from './use-observed-element';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\nexport function useAppLayoutPlacement(headerSelector: string, footerSelector: string) {\n  const mainElementRef = useRef<HTMLElement>(null);\n  const headerHeight = useObservedElement(headerSelector);\n  const footerHeight = useObservedElement(footerSelector);\n  const [offsets, setOffsets] = useState({ left: 0, right: 0, width: Number.POSITIVE_INFINITY });\n\n  const updatePosition = useCallback(() => {\n    if (!mainElementRef.current) {\n      return;\n    }\n    const { left, right, width } = mainElementRef.current.getBoundingClientRect();\n\n    // skip reading sizes in JSDOM\n    if (width === 0) {\n      return;\n    }\n\n    setOffsets({ left, right: width - right, width });\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', updatePosition);\n    return () => window.removeEventListener('resize', updatePosition);\n  }, [updatePosition]);\n\n  useResizeObserver(mainElementRef, updatePosition);\n\n  return [mainElementRef, { ...offsets, top: headerHeight, bottom: footerHeight }] as const;\n}\n"]}