{"version":3,"file":"use-background-overlap.js","sourceRoot":"","sources":["../../../../src/app-layout/visual-refresh/use-background-overlap.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACrD,OAAO,cAAc,MAAM,gDAAgD,CAAC;AAE5E;;;;;GAKG;AACH,MAAM,CAAC,OAAO,UAAU,oBAAoB,CAAC,EAC3C,aAAa,EACb,2BAA2B,EAC3B,aAAa,GAKd;IACC,MAAM,gBAAgB,GAAG,CAAC,CAAC,aAAa,CAAC;IAEzC,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC;IAEnF,MAAM,6BAA6B,GAAG,WAAW,CAC/C,CAAC,MAAc,EAAE,EAAE;QACjB,MAAM,UAAU,GAAG,gBAAgB,IAAI,MAAM,GAAG,CAAC,CAAC;QAClD,uBAAuB,CAAC,UAAU,CAAC,CAAC;QAEpC;;;;;;WAMG;QACH,iEAAiE;QACjE,MAAM,OAAO,GAAG,OAAO,aAAa,KAAK,UAAU,KAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,OAAO,CAAA,CAAC;QAC9E,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QACD,IAAI,2BAA2B,IAAI,CAAC,UAAU,IAAI,MAAM,IAAI,CAAC,EAAE;YAC7D,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;SAC5D;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,CAAC;SACxE;IACH,CAAC,EACD,CAAC,gBAAgB,EAAE,aAAa,EAAE,2BAA2B,CAAC,CAC/D,CAAC;IAEF,OAAO;QACL,oBAAoB;QACpB,6BAA6B;KAC9B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useState } from 'react';\nimport customCssProps from '../../internal/generated/custom-css-properties';\n\n/**\n * The overlap height has a default set in CSS but can also be dynamically overridden\n * for content types (such as Table and Wizard) that have variable size content in the overlap.\n * If a child component utilizes a sticky header the hasStickyBackground property will determine\n * if the background remains in the same vertical position.\n */\nexport default function useBackgroundOverlap({\n  contentHeader,\n  disableContentHeaderOverlap,\n  layoutElement,\n}: {\n  contentHeader: React.ReactNode;\n  disableContentHeaderOverlap?: boolean;\n  layoutElement: React.Ref<HTMLElement>;\n}) {\n  const hasContentHeader = !!contentHeader;\n\n  const [hasBackgroundOverlap, setHasBackgroundOverlap] = useState(hasContentHeader);\n\n  const updateBackgroundOverlapHeight = useCallback(\n    (height: number) => {\n      const hasOverlap = hasContentHeader || height > 0;\n      setHasBackgroundOverlap(hasOverlap);\n\n      /**\n       * React 18 will trigger a paint before the state is correctly updated\n       * (see https://github.com/facebook/react/issues/24331).\n       * To work around this, we bypass React state updates and imperatively update the custom property on the DOM.\n       * An alternative would be to use `queueMicrotask` and `flushSync` in the ResizeObserver callback,\n       * but that would have some performance impact as it would delay the render.\n       */\n      // Layout component uses RefObject, we don't expect a RefCallback\n      const element = typeof layoutElement !== 'function' && layoutElement?.current;\n      if (!element) {\n        return;\n      }\n      if (disableContentHeaderOverlap || !hasOverlap || height <= 0) {\n        element.style.removeProperty(customCssProps.overlapHeight);\n      } else {\n        element.style.setProperty(customCssProps.overlapHeight, `${height}px`);\n      }\n    },\n    [hasContentHeader, layoutElement, disableContentHeaderOverlap]\n  );\n\n  return {\n    hasBackgroundOverlap,\n    updateBackgroundOverlapHeight,\n  };\n}\n"]}