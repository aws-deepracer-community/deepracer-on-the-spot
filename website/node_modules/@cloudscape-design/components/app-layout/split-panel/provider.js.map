{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../../../src/app-layout/split-panel/provider.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useState } from 'react';\nimport { getLimitedValue } from '../../split-panel/utils/size-utils';\nimport { SplitPanelContextBaseProps, SplitPanelContextProvider } from '../../internal/context/split-panel-context';\nimport { SPLIT_PANEL_MIN_HEIGHT, SPLIT_PANEL_MIN_WIDTH } from './constants';\n\nexport interface SplitPanelProviderProps extends SplitPanelContextBaseProps {\n  maxWidth: number;\n  getMaxHeight: () => number;\n  children?: React.ReactNode;\n}\n\nexport function SplitPanelProvider({\n  children,\n  size,\n  getMaxHeight,\n  maxWidth,\n  onResize,\n  ...rest\n}: SplitPanelProviderProps) {\n  const { position, reportSize, isOpen } = rest;\n  const [maxHeight, setMaxHeight] = useState(size);\n  const minSize = position === 'bottom' ? SPLIT_PANEL_MIN_HEIGHT : SPLIT_PANEL_MIN_WIDTH;\n  const maxSize = position === 'bottom' ? maxHeight : maxWidth;\n  const cappedSize = getLimitedValue(minSize, size, maxSize);\n  const relativeSize = ((size - minSize) / (maxSize - minSize)) * 100;\n\n  const onResizeWithValidation = (newSize: number) => {\n    const maxSize = position === 'side' ? maxWidth : getMaxHeight();\n    const isResizeValid = position === 'side' ? maxSize >= SPLIT_PANEL_MIN_WIDTH : maxSize >= SPLIT_PANEL_MIN_HEIGHT;\n    if (isOpen && isResizeValid) {\n      onResize(getLimitedValue(minSize, newSize, maxSize));\n    }\n  };\n\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    // effects are called inside out in the components tree\n    // wait one frame to allow app-layout to complete its calculations\n    const handle = requestAnimationFrame(() => setMaxHeight(getMaxHeight()));\n    return () => cancelAnimationFrame(handle);\n  }, [size, minSize, position, getMaxHeight]);\n\n  useEffect(() => {\n    reportSize(cappedSize);\n  }, [reportSize, cappedSize]);\n\n  useEffect(() => {\n    if (position !== 'bottom') {\n      return;\n    }\n    const handler = () => setMaxHeight(getMaxHeight());\n    window.addEventListener('resize', handler);\n    return () => window.removeEventListener('resize', handler);\n  }, [position, getMaxHeight]);\n\n  return (\n    <SplitPanelContextProvider value={{ ...rest, size: cappedSize, relativeSize, onResize: onResizeWithValidation }}>\n      {children}\n    </SplitPanelContextProvider>\n  );\n}\n"]}