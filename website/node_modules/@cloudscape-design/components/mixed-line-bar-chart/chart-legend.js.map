{"version":3,"file":"chart-legend.js","sourceRoot":"","sources":["../../../src/mixed-line-bar-chart/chart-legend.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEvC,OAAO,WAAW,MAAM,qCAAqC,CAAC;AAI9D,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AAYzC,MAAM,CAAC,OAAO,UAAU,mBAAmB,CAAmC,EAC5E,MAAM,EACN,aAAa,EACb,iBAAiB,EACjB,iBAAiB,EACjB,WAAW,EACX,SAAS,EACT,gBAAgB,GACY;IAC5B,MAAM,WAAW,GAAsE,OAAO,CAAC,GAAG,EAAE;QAClG,OAAO,MAAM;aACV,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aACnD,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YAC3B,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,IAAI,EAAE,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC;YACjC,KAAK;YACL,KAAK,EAAE,MAAM;SACd,CAAC,CAAC,CAAC;IACR,CAAC,EAAE,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;IAE5B,OAAO,CACL,oBAAC,WAAW,IACV,MAAM,EAAE,WAAW,EACnB,iBAAiB,EAAE,iBAAiB,IAAI,IAAI,EAC5C,iBAAiB,EAAE,iBAAiB,EACpC,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,SAAS,EACpB,gBAAgB,EAAE,gBAAgB,GAClC,CACH,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\n\nimport ChartLegend from '../internal/components/chart-legend';\nimport { ChartFilterProps } from '../internal/components/chart-filter';\n\nimport { ChartDataTypes, MixedLineBarChartProps, InternalChartSeries } from './interfaces';\nimport { chartLegendMap } from './utils';\n\ninterface InternalChartLegendProps<T extends ChartDataTypes> {\n  series: ReadonlyArray<InternalChartSeries<T>>;\n  visibleSeries: ReadonlyArray<MixedLineBarChartProps.ChartSeries<T>>;\n  plotContainerRef: React.RefObject<HTMLDivElement>;\n  highlightedSeries?: MixedLineBarChartProps.ChartSeries<T> | null;\n  onHighlightChange: (series: MixedLineBarChartProps.ChartSeries<T> | null) => void;\n  legendTitle?: string;\n  ariaLabel?: string;\n}\n\nexport default function InternalChartLegend<T extends number | string | Date>({\n  series,\n  visibleSeries,\n  highlightedSeries,\n  onHighlightChange,\n  legendTitle,\n  ariaLabel,\n  plotContainerRef,\n}: InternalChartLegendProps<T>) {\n  const legendItems: ChartFilterProps<MixedLineBarChartProps.ChartSeries<T>>['series'] = useMemo(() => {\n    return series\n      .filter(s => visibleSeries.indexOf(s.series) !== -1)\n      .map(({ series, color }) => ({\n        label: series.title,\n        type: chartLegendMap[series.type],\n        color,\n        datum: series,\n      }));\n  }, [series, visibleSeries]);\n\n  return (\n    <ChartLegend<MixedLineBarChartProps.ChartSeries<T>>\n      series={legendItems}\n      highlightedSeries={highlightedSeries || null}\n      onHighlightChange={onHighlightChange}\n      legendTitle={legendTitle}\n      ariaLabel={ariaLabel}\n      plotContainerRef={plotContainerRef}\n    />\n  );\n}\n"]}