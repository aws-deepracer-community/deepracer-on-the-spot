{"version":3,"file":"table-role-helper.js","sourceRoot":"","sources":["../../../../src/table/table-role/table-role-helper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TableRole } from './interfaces';\n\ntype SortingStatus = 'sortable' | 'ascending' | 'descending';\n\nconst stateToAriaSort = {\n  sortable: 'none',\n  ascending: 'ascending',\n  descending: 'descending',\n} as const;\nconst getAriaSort = (sortingState: SortingStatus) => stateToAriaSort[sortingState];\n\n// Depending on its content the table can have different semantic representation which includes the\n// ARIA role of the table component (\"table\", \"grid\", \"treegrid\") but also roles and other semantic attributes\n// of the child elements. The TableRole helper encapsulates table's semantic structure.\n\nexport function getTableRoleProps(options: {\n  tableRole: TableRole;\n  ariaLabel?: string;\n  ariaLabelledBy?: string;\n  totalItemsCount?: number;\n  totalColumnsCount?: number;\n}): React.TableHTMLAttributes<HTMLTableElement> {\n  const nativeProps: React.TableHTMLAttributes<HTMLTableElement> = {};\n\n  // Browsers have weird mechanism to guess whether it's a data table or a layout table.\n  // If we state explicitly, they get it always correctly even with low number of rows.\n  nativeProps.role = options.tableRole === 'grid-default' ? 'grid' : options.tableRole;\n\n  nativeProps['aria-label'] = options.ariaLabel;\n  nativeProps['aria-labelledby'] = options.ariaLabelledBy;\n\n  // Incrementing the total count by one to account for the header row.\n  nativeProps['aria-rowcount'] = options.totalItemsCount ? options.totalItemsCount + 1 : -1;\n\n  if (options.tableRole === 'grid' || options.tableRole === 'treegrid') {\n    nativeProps['aria-colcount'] = options.totalColumnsCount;\n  }\n\n  // Make table component programmatically focusable to attach focusin/focusout for keyboard navigation.\n  if (options.tableRole === 'grid' || options.tableRole === 'treegrid') {\n    nativeProps.tabIndex = -1;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableWrapperRoleProps(options: { tableRole: TableRole; isScrollable: boolean; ariaLabel?: string }) {\n  const nativeProps: React.HTMLAttributes<HTMLDivElement> = {};\n\n  // When the table is scrollable, the wrapper is made focusable so that keyboard users can scroll it horizontally with arrow keys.\n  if (options.isScrollable) {\n    nativeProps.role = 'region';\n    nativeProps.tabIndex = 0;\n    nativeProps['aria-label'] = options.ariaLabel;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableHeaderRowRoleProps(options: { tableRole: TableRole }) {\n  const nativeProps: React.HTMLAttributes<HTMLTableRowElement> = {};\n\n  // For grids headers are treated similar to data rows and are indexed accordingly.\n  if (options.tableRole === 'grid' || options.tableRole === 'grid-default' || options.tableRole === 'treegrid') {\n    nativeProps['aria-rowindex'] = 1;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableRowRoleProps(options: {\n  tableRole: TableRole;\n  rowIndex: number;\n  firstIndex?: number;\n  level?: number;\n  setSize?: number;\n  posInSet?: number;\n}) {\n  const nativeProps: React.HTMLAttributes<HTMLTableRowElement> = {};\n\n  // The data cell indices are incremented by 1 to account for the header cells.\n  if (options.tableRole === 'grid' || options.tableRole === 'treegrid') {\n    nativeProps['aria-rowindex'] = (options.firstIndex || 1) + options.rowIndex + 1;\n  }\n  // For tables indices are only added when the first index is not 0 (not the first page/frame).\n  else if (options.firstIndex !== undefined) {\n    nativeProps['aria-rowindex'] = options.firstIndex + options.rowIndex + 1;\n  }\n  if (options.tableRole === 'treegrid' && options.level && options.level !== 0) {\n    nativeProps['aria-level'] = options.level;\n  }\n  if (options.tableRole === 'treegrid' && options.setSize) {\n    nativeProps['aria-setsize'] = options.setSize;\n  }\n  if (options.tableRole === 'treegrid' && options.posInSet) {\n    nativeProps['aria-posinset'] = options.posInSet;\n  }\n\n  return nativeProps;\n}\n\nexport function getTableColHeaderRoleProps(options: {\n  tableRole: TableRole;\n  colIndex: number;\n  sortingStatus?: SortingStatus;\n}) {\n  const nativeProps: React.ThHTMLAttributes<HTMLTableCellElement> = {};\n\n  nativeProps.scope = 'col';\n\n  if (options.tableRole === 'grid' || options.tableRole === 'treegrid') {\n    nativeProps['aria-colindex'] = options.colIndex + 1;\n  }\n\n  if (options.sortingStatus) {\n    nativeProps['aria-sort'] = getAriaSort(options.sortingStatus);\n  }\n\n  return nativeProps;\n}\n\nexport function getTableCellRoleProps(options: { tableRole: TableRole; colIndex: number; isRowHeader?: boolean }) {\n  const nativeProps: React.TdHTMLAttributes<HTMLTableCellElement> = {};\n\n  if (options.tableRole === 'grid' || options.tableRole === 'treegrid') {\n    nativeProps['aria-colindex'] = options.colIndex + 1;\n  }\n\n  if (options.isRowHeader) {\n    nativeProps.scope = 'row';\n  }\n\n  return nativeProps;\n}\n"]}