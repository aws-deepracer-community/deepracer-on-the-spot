{"version":3,"file":"sticky-scrollbar.js","sourceRoot":"","sources":["../../../../src/table/sticky-scrollbar/sticky-scrollbar.tsx"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAC5D,OAAO,EAAE,YAAY,EAAE,MAAM,qCAAqC,CAAC;AACnE,OAAO,EAAE,mBAAmB,EAAE,MAAM,2CAA2C,CAAC;AAChF,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,MAAM,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,6CAA6C,CAAC;AACnF,OAAO,EAAE,gBAAgB,EAAE,MAAM,sCAAsC,CAAC;AASxE,eAAe,UAAU,CAAC,eAAe,CAAC,CAAC;AAE3C,SAAS,eAAe,CACtB,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAwB,EAC1E,GAA8B;IAE9B,MAAM,eAAe,GAAG,gBAAgB,EAAE,CAAC;IAC3C,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAiB,IAAI,CAAC,CAAC;IACxD,MAAM,mBAAmB,GAAG,KAAK,CAAC,MAAM,CAAiB,IAAI,CAAC,CAAC;IAC/D,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAElD;;;OAGG;IACH,MAAM,eAAe,GAAG,gBAAgB,IAAI,oBAAoB,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC;IAEhF;;;OAGG;IACH,MAAM,EAAE,kBAAkB,EAAE,GAAG,mBAAmB,EAAE,CAAC;IAErD,kBAAkB,CAAC,YAAY,EAAE,mBAAmB,EAAE,QAAQ,EAAE,UAAU,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAC;IACjH,OAAO,CACL,6BACE,GAAG,EAAE,SAAS,EACd,SAAS,EAAE,IAAI,CACb,MAAM,CAAC,kBAAkB,CAAC,EAC1B,eAAe,IAAI,MAAM,CAAC,yBAAyB,CAAC,EACpD,eAAe,IAAI,MAAM,CAAC,mBAAmB,CAAC,CAC/C,EACD,QAAQ,EAAE,QAAQ;QAElB,6BAAK,GAAG,EAAE,mBAAmB,EAAE,SAAS,EAAE,MAAM,CAAC,0BAA0B,CAAC,GAAI,CAC5E,CACP,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef } from 'react';\nimport { useStickyScrollbar } from './use-sticky-scrollbar';\nimport { useMergeRefs } from '../../internal/hooks/use-merge-refs';\nimport { useAppLayoutContext } from '../../internal/context/app-layout-context';\nimport clsx from 'clsx';\nimport styles from './styles.css.js';\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\n\ninterface StickyScrollbarProps {\n  wrapperRef: React.RefObject<HTMLDivElement>;\n  tableRef: React.RefObject<HTMLTableElement>;\n  onScroll?: React.UIEventHandler<HTMLDivElement>;\n  hasStickyColumns?: boolean;\n}\n\nexport default forwardRef(StickyScrollbar);\n\nfunction StickyScrollbar(\n  { wrapperRef, tableRef, onScroll, hasStickyColumns }: StickyScrollbarProps,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const isVisualRefresh = useVisualRefresh();\n  const scrollbarRef = React.useRef<HTMLDivElement>(null);\n  const scrollbarContentRef = React.useRef<HTMLDivElement>(null);\n  const mergedRef = useMergeRefs(ref, scrollbarRef);\n\n  /**\n   * If the height of the scrollbar is 0, we're likely on a platform that uses\n   * overlay scrollbars (e.g. Mac).\n   */\n  const offsetScrollbar = hasStickyColumns || browserScrollbarSize().height === 0;\n\n  /**\n   * Use the appropriate AppLayout context (Classic or Visual Refresh) to determine\n   * the offsetBottom value to be used in the useStickyScrollbar hook.\n   */\n  const { stickyOffsetBottom } = useAppLayoutContext();\n\n  useStickyScrollbar(scrollbarRef, scrollbarContentRef, tableRef, wrapperRef, stickyOffsetBottom, offsetScrollbar);\n  return (\n    <div\n      ref={mergedRef}\n      className={clsx(\n        styles['sticky-scrollbar'],\n        offsetScrollbar && styles['sticky-scrollbar-offset'],\n        isVisualRefresh && styles['is-visual-refresh']\n      )}\n      onScroll={onScroll}\n    >\n      <div ref={scrollbarContentRef} className={styles['sticky-scrollbar-content']} />\n    </div>\n  );\n}\n"]}