{"version":3,"file":"use-calendar-grid-rows.js","sourceRoot":"","sources":["../../../../src/calendar/grid/use-calendar-grid-rows.ts"],"names":[],"mappings":"AAAA,qEAAqE;AACrE,sCAAsC;AAEtC,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAC;AAC5E,OAAO,EAAE,gBAAgB,EAAE,MAAM,MAAM,CAAC;AAGxC,MAAM,CAAC,OAAO,UAAU,mBAAmB,CAAC,EAC1C,QAAQ,EACR,WAAW,EACX,MAAM,EACN,WAAW,GAMZ;IACC,MAAM,aAAa,GAAG,WAAW,KAAK,OAAO,CAAC;IAE9C,MAAM,IAAI,GAAG,OAAO,CAClB,GAAG,EAAE,CACH,aAAa;QACX,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC;QAC3B,CAAC,CAAC,gBAAgB,CAAC,QAAQ,EAAE,EAAE,cAAc,EAAE,oBAAoB,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,CAAC,EAC/F,CAAC,QAAQ,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,CAAC,CAC/C,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC;AAED,wHAAwH;AACxH,SAAS,eAAe,CAAC,IAAU;IACjC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAChC,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;SAChB,IAAI,CAAC,CAAC,CAAC;SACP,GAAG,CAAC,CAAC,CAAC,EAAE,CAAS,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAS,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAClG,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useMemo } from 'react';\nimport { normalizeStartOfWeek } from '../../internal/utils/locale/index.js';\nimport { getCalendarMonth } from 'mnth';\nimport { CalendarProps } from '../interfaces.js';\n\nexport default function useCalendarGridRows({\n  baseDate,\n  granularity,\n  locale,\n  startOfWeek,\n}: {\n  baseDate: Date;\n  granularity: CalendarProps.Granularity;\n  locale: string;\n  startOfWeek?: number;\n}) {\n  const isMonthPicker = granularity === 'month';\n\n  const rows = useMemo<Date[][]>(\n    () =>\n      isMonthPicker\n        ? getCalendarYear(baseDate)\n        : getCalendarMonth(baseDate, { firstDayOfWeek: normalizeStartOfWeek(startOfWeek, locale) }),\n    [baseDate, isMonthPicker, startOfWeek, locale]\n  );\n\n  return rows;\n}\n\n// Returns a 3-by-4 matrix with dates corresponding to the initial date-time of each month of the year for a given date.\nfunction getCalendarYear(date: Date): Date[][] {\n  const year = date.getFullYear();\n  return new Array(4)\n    .fill(0)\n    .map((_, i: number) => new Array(3).fill(0).map((_, j: number) => new Date(year, i * 3 + j)));\n}\n"]}