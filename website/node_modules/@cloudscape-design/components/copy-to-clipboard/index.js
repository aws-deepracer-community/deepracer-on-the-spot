import { __rest } from "tslib";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useState } from 'react';
import { getBaseProps } from '../internal/base-component';
import { applyDisplayName } from '../internal/utils/apply-display-name';
import useBaseComponent from '../internal/hooks/use-base-component';
import InternalButton from '../button/internal';
import InternalPopover from '../popover/internal';
import InternalStatusIndicator from '../status-indicator/internal';
import styles from './styles.css.js';
import testStyles from './test-classes/styles.css.js';
import clsx from 'clsx';
export default function CopyToClipboard(_a) {
    var { variant = 'button', copyButtonAriaLabel, copyButtonText, copySuccessText, copyErrorText, textToCopy } = _a, restProps = __rest(_a, ["variant", "copyButtonAriaLabel", "copyButtonText", "copySuccessText", "copyErrorText", "textToCopy"]);
    const { __internalRootRef } = useBaseComponent('CopyToClipboard', {
        props: { variant },
    });
    const baseProps = getBaseProps(restProps);
    const copyButtonProps = variant === 'button'
        ? { children: copyButtonText, ariaLabel: copyButtonAriaLabel }
        : { ariaLabel: copyButtonAriaLabel !== null && copyButtonAriaLabel !== void 0 ? copyButtonAriaLabel : copyButtonText };
    const [status, setStatus] = useState('pending');
    const [statusText, setStatusText] = useState('');
    const onClick = () => {
        if (navigator.clipboard) {
            setStatus('pending');
            setStatusText('');
            navigator.clipboard
                .writeText(textToCopy)
                .then(() => {
                setStatus('success');
                setStatusText(copySuccessText);
            })
                .catch(() => {
                setStatus('error');
                setStatusText(copyErrorText);
            });
        }
    };
    const triggerVariant = {
        button: 'normal',
        icon: 'icon',
        inline: 'inline-icon',
    }[variant];
    const trigger = (React.createElement(InternalPopover, { size: "medium", position: "top", triggerType: "custom", dismissButton: false, renderWithPortal: true, content: React.createElement(InternalStatusIndicator, { type: status }, statusText) },
        React.createElement(InternalButton, Object.assign({}, copyButtonProps, { iconName: "copy", onClick: onClick, variant: triggerVariant, wrapText: false, formAction: "none" }))));
    return (React.createElement("span", Object.assign({ ref: __internalRootRef }, baseProps, { className: clsx(baseProps.className, styles.root, testStyles.root) }), variant === 'inline' ? (React.createElement("span", { className: styles['inline-container'] },
        React.createElement("span", { className: styles['inline-container-trigger'] }, trigger),
        React.createElement("span", { className: testStyles['text-to-copy'] }, textToCopy))) : (trigger)));
}
applyDisplayName(CopyToClipboard, 'CopyToClipboard');
//# sourceMappingURL=index.js.map