{"version":3,"file":"time-offset.js","sourceRoot":"","sources":["../../../src/date-range-picker/time-offset.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,+CAA+C,CAAC;AACzE,OAAO,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AAC5G,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAEtC;;GAEG;AACH,MAAM,UAAU,aAAa,CAC3B,KAAwC,EACxC,UAAoD;IAEpD,IAAI,CAAC,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,MAAK,UAAU,CAAC,EAAE;QACjC,OAAO,KAAK,CAAC;KACd;IACD,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,KAAK,CAAC,SAAS,GAAG,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC;QACvF,OAAO,EAAE,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC;KAChF,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAC7B,KAAwC,EACxC,UAAoD;IAEpD,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;QACvC,OAAO,KAAK,CAAC;KACd;IAED;;;;;MAKE;IACF,MAAM,aAAa,GAAG,iFAAiF,CAAC;IAExG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE;QAC9E,QAAQ,CACN,iBAAiB,EACjB,sGAAsG;YACpG,uEAAuE,CAC1E,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IAED,OAAO;QACL,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC;QACrE,OAAO,EAAE,mBAAmB,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC;KAChE,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,KAAwC,EACxC,aAA0D,EAC1D,UAAmB;IAEnB,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;QACtC,IAAI,aAAa,EAAE;YACjB,OAAO;gBACL,SAAS,EAAE,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACvD,OAAO,EAAE,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACpD,CAAC;SACH;aAAM,IAAI,UAAU,KAAK,SAAS,EAAE;YACnC,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC;SACvD;KACF;IACD,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;AACtD,CAAC;AAED;;;;;;;;;;;;;;;EAeE;AACF,SAAS,YAAY,CAAC,aAAqB;IACzC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;IACrC,OAAO,UAAU,CAAC,IAAI,EAAE,mBAAmB,CAAC,aAAa,CAAC,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DateRangePickerProps } from './interfaces';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { formatTimeOffsetISO, parseTimezoneOffset, shiftTimezoneOffset } from '../internal/utils/date-time';\nimport { addMinutes } from 'date-fns';\n\n/**\n * Appends a time zone offset to an offset-less date string.\n */\nexport function setTimeOffset(\n  value: DateRangePickerProps.Value | null,\n  timeOffset: { startDate?: number; endDate?: number }\n): DateRangePickerProps.Value | null {\n  if (!(value?.type === 'absolute')) {\n    return value;\n  }\n  return {\n    type: 'absolute',\n    startDate: value.startDate + formatTimeOffsetISO(value.startDate, timeOffset.startDate),\n    endDate: value.endDate + formatTimeOffsetISO(value.endDate, timeOffset.endDate),\n  };\n}\n\n/**\n * Re-formats an absolute date range so that it is expressed using the\n * target time offset. The returned value still represents the same range\n * in time, but contains no visible offset.\n */\nexport function shiftTimeOffset(\n  value: null | DateRangePickerProps.Value,\n  timeOffset: { startDate?: number; endDate?: number }\n): DateRangePickerProps.Value | null {\n  if (!value || value.type !== 'absolute') {\n    return value;\n  }\n\n  /*\n    This regex matches an ISO date-time with\n    - optional seconds;\n    - optional milliseconds;\n    - optional time offset or 'Z'.\n  */\n  const dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(:\\d{2})?(\\.\\d{1,3})?(((\\+|-)\\d{2}(:\\d{2})?)|Z)?$/;\n\n  if (!dateTimeRegex.test(value.startDate) || !dateTimeRegex.test(value.endDate)) {\n    warnOnce(\n      'DateRangePicker',\n      'You have provided a misformatted start or end date. The component will fall back to an empty value. ' +\n        'Dates have to be ISO8601-formatted with an optional time zone offset.'\n    );\n    return null;\n  }\n\n  return {\n    type: 'absolute',\n    startDate: shiftTimezoneOffset(value.startDate, timeOffset.startDate),\n    endDate: shiftTimezoneOffset(value.endDate, timeOffset.endDate),\n  };\n}\n\nexport function normalizeTimeOffset(\n  value: null | DateRangePickerProps.Value,\n  getTimeOffset?: DateRangePickerProps.GetTimeOffsetFunction,\n  timeOffset?: number\n) {\n  if (value && value.type === 'absolute') {\n    if (getTimeOffset) {\n      return {\n        startDate: getTimeOffset(parseDateUTC(value.startDate)),\n        endDate: getTimeOffset(parseDateUTC(value.endDate)),\n      };\n    } else if (timeOffset !== undefined) {\n      return { startDate: timeOffset, endDate: timeOffset };\n    }\n  }\n  return { startDate: undefined, endDate: undefined };\n}\n\n/*\n  Before the getTimeOffset function is used there is no information on the preferred time offset.\n  \n  Besides, the ISO date string might or might not contain the offset:\n  - 2021-02-03T01:02:03\n  - 2021-02-03T01:02:03Z\n  - 2021-02-03T01:02:03+01:00\n  \n  For every value above the date is converted to UTC and the following is true:\n  date.getUTCFullYear() === 2021\n  date.getUTCMonth() === 1\n  date.getUTCDate() === 3\n  date.getUTCHours() === 1\n  date.getUTCMinutes() === 2\n  date.getUTCSeconds() === 3\n*/\nfunction parseDateUTC(isoDateString: string): Date {\n  const date = new Date(isoDateString);\n  return addMinutes(date, parseTimezoneOffset(isoDateString));\n}\n"]}