{"version":3,"file":"base-checkbox.js","sourceRoot":"","sources":["../../../src/checkbox/base-checkbox.tsx"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { BaseComponentProps } from '../internal/base-component';\nimport { NonCancelableEventHandler } from '../internal/events';\nimport { FormFieldControlProps } from '../internal/context/form-field-context';\n\nexport interface BaseCheckboxProps extends BaseComponentProps, FormFieldControlProps {\n  /**\n   * Specifies if the component is selected.\n   */\n  checked: boolean;\n\n  /**\n   * Specifies the name of the control used in HTML forms.\n   */\n  name?: string;\n\n  /**\n   * Specifies if the control is disabled, which prevents the\n   * user from modifying the value and prevents the value from\n   * being included in a form submission. A disabled control can't\n   * receive focus.\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the ID of the native form element. By default, it uses an automatically generated ID.\n   */\n  controlId?: string;\n\n  /**\n   * Adds an `aria-label` to the native control.\n   *\n   * Use this if you don't have a visible label for this control.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Called when input focus is moved to the UI control.\n   */\n  onFocus?: NonCancelableEventHandler;\n\n  /**\n   * Called when input focus is removed from the UI control.\n   */\n  onBlur?: NonCancelableEventHandler;\n\n  children?: React.ReactNode;\n\n  /**\n   * Description that appears below the label.\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Adds `aria-controls` attribute to the component.\n   * If the component controls any secondary content (for example, another form field), use this to provide an ID referring to the secondary content.\n   */\n  ariaControls?: string;\n}\n"]}