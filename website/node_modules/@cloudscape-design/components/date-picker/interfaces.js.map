{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/date-picker/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { BaseComponentProps } from '../internal/base-component';\nimport { FormFieldValidationControlProps } from '../internal/context/form-field-context';\nimport { ExpandToViewport } from '../internal/components/dropdown/interfaces';\nimport { NonCancelableEventHandler } from '../internal/events';\nimport { CalendarProps } from '../calendar/interfaces';\n\nexport interface DatePickerProps\n  extends BaseComponentProps,\n    FormFieldValidationControlProps,\n    ExpandToViewport,\n    CalendarProps {\n  /**\n   * Specifies the placeholder text rendered when the value is an empty string.\n   */\n  placeholder?: string;\n\n  /**\n   * Specifies a function that generates the `aria-label` for the 'open calendar' button. The `selectedDate` parameter is\n   * a human-readable localised string representing the current value of the input.\n   * (for example, ``selectedDate => 'Choose Date' + (selectedDate ? `, selected date is ${selectedDate}` : '')``)\n   */\n  openCalendarAriaLabel?: DatePickerProps.OpenCalendarAriaLabel;\n\n  /**\n   * Specifies the name of the control used in HTML forms.\n   */\n  name?: string;\n\n  /**\n   * Specifies if the control is disabled, which prevents the\n   * user from modifying the value and prevents the value from\n   * being included in a form submission. A disabled control can't\n   * receive focus.\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies if the control is read only, which prevents the\n   * user from modifying the value but includes it in a form\n   * submission. A read-only control can receive focus.\n   *\n   * Do not use read-only inputs outside of a form.\n   */\n  readOnly?: boolean;\n\n  /**\n   * Indicates whether the control should be focused as\n   * soon as the page loads, which enables the user to\n   * start typing without having to manually focus the control. Don't\n   * use this option on pages where the control may be\n   * scrolled out of the viewport.\n   */\n  autoFocus?: boolean;\n\n  /**\n   * Adds an `aria-label` to the native control.\n   *\n   * Use this if you don't have a visible label for this control.\n   */\n  ariaLabel?: string;\n\n  /**\n   * Specifies whether to add `aria-required` to the native control.\n   */\n  ariaRequired?: boolean;\n\n  /**\n   * Called when input focus is moved to the UI control.\n   */\n  onFocus?: NonCancelableEventHandler<null>;\n\n  /**\n   * Called when input focus is removed from the UI control.\n   */\n  onBlur?: NonCancelableEventHandler<null>;\n\n  /**\n   * An object containing all the necessary localized strings required by\n   * the component.\n   * @i18n\n   */\n  i18nStrings?: DatePickerProps.I18nStrings;\n}\n\nexport namespace DatePickerProps {\n  export interface ChangeDetail {\n    /**\n     * The new value of this date-picker.\n     */\n    value: string;\n  }\n\n  export interface IsDateEnabledFunction {\n    (date: Date): boolean;\n  }\n\n  export interface OpenCalendarAriaLabel {\n    (selectedDate: string | null): string;\n  }\n\n  export interface Ref {\n    /**\n     * Sets the browser focus on the UI control\n     */\n    focus(): void;\n  }\n\n  export type I18nStrings = CalendarProps.I18nStrings;\n}\n"]}