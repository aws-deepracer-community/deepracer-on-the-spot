{"version":3,"file":"use-announcement.js","sourceRoot":"","sources":["../../../../src/select/utils/use-announcement.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,wBAAwB,MAAM,mDAAmD,CAAC;AAMzF;;;;;GAKG;AACH,MAAM,UAAU,eAAe,CAA8B,EAC3D,gBAAgB,EAChB,iBAAiB,EACjB,SAAS,EACT,iBAAiB,EACjB,yBAAyB,GAO1B;IACC,MAAM,kBAAkB,GAAG,MAAM,CAA0B,SAAS,CAAC,CAAC;IAEtE,iGAAiG;IACjG,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,iBAAiB,EAAE;YACrB,MAAM,OAAO,GAAG,qBAAqB,CAAC,GAAG,EAAE;gBACzC,kBAAkB,CAAC,OAAO,GAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;YACH,OAAO,GAAG,EAAE,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;SAC5C;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,iBAAiB,EAAE;QACtB,OAAO,EAAE,CAAC;KACX;IAED,MAAM,MAAM,GAAG,iBAAiB,CAAC,MAA0B,CAAC;IAC5D,MAAM,MAAM,GAAG,SAAS,CAAC,iBAAiB,CAAC,CAAC;IAC5C,0EAA0E;IAC1E,MAAM,KAAK,GAAG,MAAM,IAAI,MAAM,KAAK,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;IAEnF,mCAAmC;IACnC,IAAI,yBAAyB,EAAE;QAC7B,OAAO,yBAAyB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACjD;IAED,yEAAyE;IACzE,MAAM,oBAAoB,GAAG,gBAAgB,IAAI,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5F,MAAM,kBAAkB,GAAG,wBAAwB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACnE,OAAO,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9E,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { SelectProps } from '../interfaces';\nimport { useEffect, useRef } from 'react';\nimport defaultOptionDescription from '../../internal/components/option/option-announcer';\n\ninterface OptionHolder {\n  option?: OptionDefinition | OptionGroup;\n}\n\n/**\n * The hook produces the live region string to be announced when an option is highlighted.\n * This is a workaround to account for the issues with assistive technologies.\n *\n * If the testing reveals no issues with the native announcements the live-region can be removed.\n */\nexport function useAnnouncement<Option extends OptionHolder>({\n  announceSelected,\n  highlightedOption,\n  getParent,\n  selectedAriaLabel,\n  renderHighlightedAriaLive,\n}: {\n  announceSelected: boolean;\n  highlightedOption?: Option;\n  getParent: (option: Option) => undefined | OptionGroup;\n  selectedAriaLabel?: string;\n  renderHighlightedAriaLive?: SelectProps.ContainingOptionAndGroupString;\n}) {\n  const prevAnnouncedGroup = useRef<OptionGroup | undefined>(undefined);\n\n  // Record previously announced group with a delay to account for possible re-renders of the hook.\n  useEffect(() => {\n    if (highlightedOption) {\n      const frameId = requestAnimationFrame(() => {\n        prevAnnouncedGroup.current = getParent(highlightedOption);\n      });\n      return () => cancelAnimationFrame(frameId);\n    }\n  });\n\n  if (!highlightedOption) {\n    return '';\n  }\n\n  const option = highlightedOption.option as OptionDefinition;\n  const parent = getParent(highlightedOption);\n  // Only announce parent group if it wasn't announced with previous option.\n  const group = parent && parent !== prevAnnouncedGroup.current ? parent : undefined;\n\n  // Use custom renderer if provided.\n  if (renderHighlightedAriaLive) {\n    return renderHighlightedAriaLive(option, group);\n  }\n\n  // Use default renderer with selected ARIA label if defined and relevant.\n  const selectedAnnouncement = announceSelected && selectedAriaLabel ? selectedAriaLabel : '';\n  const defaultDescription = defaultOptionDescription(option, group);\n  return [selectedAnnouncement, defaultDescription].filter(Boolean).join(' ');\n}\n"]}