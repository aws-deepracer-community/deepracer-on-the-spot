import { Dispatch, Reducer } from 'react';
import { CollectionActions, UseCollectionOptions, CollectionState, SortingState, UseCollectionResult, CollectionRef, PropertyFilterQuery } from './interfaces';
interface SelectionAction<T> {
    type: 'selection';
    selectedItems: ReadonlyArray<T>;
}
interface SortingAction<T> {
    type: 'sorting';
    sortingState: SortingState<T>;
}
interface PaginationAction {
    type: 'pagination';
    pageIndex: number;
}
interface FilteringAction {
    type: 'filtering';
    filteringText: string;
}
interface PropertyFilteringAction {
    type: 'property-filtering';
    query: PropertyFilterQuery;
}
type Action<T> = SelectionAction<T> | SortingAction<T> | PaginationAction | FilteringAction | PropertyFilteringAction;
export type CollectionReducer<T> = Reducer<CollectionState<T>, Action<T>>;
export declare function collectionReducer<T>(state: CollectionState<T>, action: Action<T>): CollectionState<T>;
export declare function createActions<T>({ dispatch, collectionRef, }: {
    dispatch: Dispatch<Action<T>>;
    collectionRef: React.RefObject<CollectionRef>;
}): CollectionActions<T>;
export declare function createSyncProps<T>(options: UseCollectionOptions<T>, { filteringText, sortingState, selectedItems, currentPageIndex, propertyFilteringQuery }: CollectionState<T>, actions: CollectionActions<T>, collectionRef: React.RefObject<CollectionRef>, { pagesCount, actualPageIndex, allItems, allPageItems, }: {
    pagesCount?: number;
    actualPageIndex?: number;
    allItems: ReadonlyArray<T>;
    allPageItems: ReadonlyArray<T>;
}): Pick<UseCollectionResult<T>, 'collectionProps' | 'filterProps' | 'paginationProps' | 'propertyFilterProps'>;
export {};
