"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.itemsAreEqual = exports.processSelectedItems = exports.getTrackableValue = exports.processItems = void 0;
var filter_js_1 = require("./filter.js");
var property_filter_js_1 = require("./property-filter.js");
var sort_js_1 = require("./sort.js");
var pagination_js_1 = require("./pagination.js");
var compose_filters_js_1 = require("./compose-filters.js");
function processItems(items, _a, _b) {
    var filteringText = _a.filteringText, sortingState = _a.sortingState, currentPageIndex = _a.currentPageIndex, propertyFilteringQuery = _a.propertyFilteringQuery;
    var filtering = _b.filtering, sorting = _b.sorting, pagination = _b.pagination, propertyFiltering = _b.propertyFiltering;
    var filterPredicate = (0, compose_filters_js_1.composeFilters)((0, property_filter_js_1.createPropertyFilterPredicate)(propertyFiltering, propertyFilteringQuery), (0, filter_js_1.createFilterPredicate)(filtering, filteringText));
    if (filterPredicate) {
        items = items.filter(filterPredicate);
    }
    var filteredItemsCount = filterPredicate ? items.length : undefined;
    var comparator = (0, sort_js_1.createComparator)(sorting, sortingState);
    if (comparator) {
        items = items.slice().sort(comparator);
    }
    var allPageItems = items;
    var pageProps = (0, pagination_js_1.createPageProps)(pagination, currentPageIndex, items);
    if (pageProps) {
        items = items.slice((pageProps.pageIndex - 1) * pageProps.pageSize, pageProps.pageIndex * pageProps.pageSize);
    }
    return {
        items: items,
        allPageItems: allPageItems,
        filteredItemsCount: filteredItemsCount,
        pagesCount: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pagesCount,
        actualPageIndex: pageProps === null || pageProps === void 0 ? void 0 : pageProps.pageIndex,
    };
}
exports.processItems = processItems;
var getTrackableValue = function (trackBy, item) {
    if (!trackBy) {
        return item;
    }
    if (typeof trackBy === 'function') {
        return trackBy(item);
    }
    return item[trackBy];
};
exports.getTrackableValue = getTrackableValue;
var processSelectedItems = function (items, selectedItems, trackBy) {
    var selectedSet = new Set();
    selectedItems.forEach(function (item) { return selectedSet.add((0, exports.getTrackableValue)(trackBy, item)); });
    return items.filter(function (item) { return selectedSet.has((0, exports.getTrackableValue)(trackBy, item)); });
};
exports.processSelectedItems = processSelectedItems;
var itemsAreEqual = function (items1, items2, trackBy) {
    if (items1.length !== items2.length) {
        return false;
    }
    var set1 = new Set();
    items1.forEach(function (item) { return set1.add((0, exports.getTrackableValue)(trackBy, item)); });
    return items2.every(function (item) { return set1.has((0, exports.getTrackableValue)(trackBy, item)); });
};
exports.itemsAreEqual = itemsAreEqual;
